// Copyright ¬© 2023 TDS. All rights reserved. 2023-12-18 Ïõî Ïò§Ï†Ñ 01:02 ÍøÄÍøÄüê∑

import UIKit

final class System {
    static let shared: System = .init()
    
    /// Ïö∞Î¶¨ Ïï± Ïï±Ïä§ÌÜ†Ïñ¥ ÎßÅÌÅ¨
    private let appStoreOpenUrlString: String
    private let appleID: String
    /// ÌòÑÏû¨ Ïï±Î≤ÑÏ†Ñ Ï†ïÎ≥¥
    let appVersion: String
    /// Ïï±Ïä§ÌÜ†Ïñ¥ÏóêÏÑúÏùò Ïï±Î≤ÑÏ†Ñ Ï†ïÎ≥¥
    var appStoreVersion: String
    
    private init() {
        self.appleID = Bundle.main.object(forInfoDictionaryKey: "APPSTORE_ID") as? String ?? ""
        self.appVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1"
        self.appStoreVersion = "1"
        self.appStoreOpenUrlString = "itms-apps://itunes.apple.com/app/apple-store/\(self.appleID)"
        Task {
            self.appStoreVersion = await self.latestVersion()
        }
    }
    
    /// Ïï± Ïä§ÌÜ†Ïñ¥ ÏµúÏã† Ï†ïÎ≥¥ ÌôïÏù∏
    private func latestVersion() async -> String {
        do {
            guard let url = URL(string: "http://itunes.apple.com/lookup?id=\(appleID)") else {
                return "1"
            }
            
            let (data, _) = try await URLSession.shared.data(from: url)
            let json = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [String: Any]
            let results = json?["results"] as? [[String: Any]]
            let appStoreVersion = results?[0]["version"] as? String
            
            return appStoreVersion ?? "1"
        } catch {
            Log.error("Error fetching data: \(error)")
            return "1"
        }
    }
    
    func compareMinorVersions(appVersion: String, storeVersion: String) -> Bool {
        let app = String(appVersion.prefix(3))// appVersion.split(separator: ".").map { String($0) }
        let store = String(storeVersion.prefix(3))
        
        let doubleApp = Double(app)
        let doubleStore = Double(store)
        
        guard let doubleApp, let doubleStore else {
            Log.error("Î≤ÑÏ†Ñ Ìè¨Îß∑ Î∂àÏùºÏπò \(doubleApp) : \(doubleStore)")
            return true
        }
        
        if doubleApp < doubleStore { // ÏÑ§ÏπòÎ≤ÑÏ†Ñ < Ïï±Ïä§ÌÜ†Ïñ¥ Î≤ÑÏ†Ñ
            return false // ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî
        } else {
            return true // ÏóÖÎç∞Ïù¥Ìä∏ Î∂àÌïÑÏöî
        }
    }
    
    // Ïï± Ïä§ÌÜ†Ïñ¥Î°ú Ïù¥Îèô -> urlStr Ïóê appStoreOpenUrlString ÎÑ£ÏúºÎ©¥ Ïù¥Îèô
    func openAppStore() async {
        guard let url = URL(string: self.appStoreOpenUrlString) else { return }
        if await UIApplication.shared.canOpenURL(url) {
            await UIApplication.shared.open(url, options: [:], completionHandler: nil)
        }
    }
}
